{"version":3,"sources":["webpack://tauri-theia/./node_modules/@theia/preferences/src/browser/abstract-resource-preference-provider.ts","webpack://tauri-theia/./node_modules/@theia/preferences/src/browser/folder-preference-provider.ts","webpack://tauri-theia/./node_modules/@theia/preferences/src/browser/folders-preferences-provider.ts","webpack://tauri-theia/./node_modules/@theia/preferences/src/browser/preference-bindings.ts","webpack://tauri-theia/./node_modules/@theia/preferences/src/browser/section-preference-provider.ts","webpack://tauri-theia/./node_modules/@theia/preferences/src/browser/user-configs-preference-provider.ts","webpack://tauri-theia/./node_modules/@theia/preferences/src/browser/user-preference-provider.ts","webpack://tauri-theia/./node_modules/@theia/preferences/src/browser/workspace-file-preference-provider.ts","webpack://tauri-theia/./node_modules/@theia/preferences/src/browser/workspace-preference-provider.ts"],"names":[],"mappings":"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","file":"vendors-node_modules_theia_preferences_lib_browser_preference-bindings_js.bundle.js","sourcesContent":["/********************************************************************************\n * Copyright (C) 2018 Ericsson and others.\n *\n * This program and the accompanying materials are made available under the\n * terms of the Eclipse Public License v. 2.0 which is available at\n * http://www.eclipse.org/legal/epl-2.0.\n *\n * This Source Code may also be made available under the following Secondary\n * Licenses when the conditions for such availability set forth in the Eclipse\n * Public License v. 2.0 are satisfied: GNU General Public License, version 2\n * with the GNU Classpath Exception which is available at\n * https://www.gnu.org/software/classpath/license.html.\n *\n * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0\n ********************************************************************************/\n\n/* eslint-disable @typescript-eslint/no-explicit-any */\n/* eslint-disable no-null/no-null */\n\nimport * as jsoncparser from 'jsonc-parser';\nimport { inject, injectable, postConstruct } from '@theia/core/shared/inversify';\nimport { MessageService } from '@theia/core/lib/common/message-service';\nimport { Disposable } from '@theia/core/lib/common/disposable';\nimport { PreferenceProvider, PreferenceSchemaProvider, PreferenceScope, PreferenceProviderDataChange } from '@theia/core/lib/browser';\nimport URI from '@theia/core/lib/common/uri';\nimport { PreferenceConfigurations } from '@theia/core/lib/browser/preferences/preference-configurations';\nimport { MonacoTextModelService } from '@theia/monaco/lib/browser/monaco-text-model-service';\nimport { MonacoEditorModel } from '@theia/monaco/lib/browser/monaco-editor-model';\nimport { MonacoWorkspace } from '@theia/monaco/lib/browser/monaco-workspace';\nimport { Deferred } from '@theia/core/lib/common/promise-util';\nimport { FileService } from '@theia/filesystem/lib/browser/file-service';\n\n@injectable()\nexport abstract class AbstractResourcePreferenceProvider extends PreferenceProvider {\n\n    protected preferences: { [key: string]: any } = {};\n    protected model: MonacoEditorModel | undefined;\n    protected readonly loading = new Deferred();\n    protected modelInitialized = false;\n\n    @inject(MessageService) protected readonly messageService: MessageService;\n    @inject(PreferenceSchemaProvider) protected readonly schemaProvider: PreferenceSchemaProvider;\n    @inject(FileService) protected readonly fileService: FileService;\n\n    @inject(PreferenceConfigurations)\n    protected readonly configurations: PreferenceConfigurations;\n\n    @inject(MonacoTextModelService)\n    protected readonly textModelService: MonacoTextModelService;\n\n    @inject(MonacoWorkspace)\n    protected readonly workspace: MonacoWorkspace;\n\n    @postConstruct()\n    protected async init(): Promise<void> {\n        const uri = this.getUri();\n        this.toDispose.push(Disposable.create(() => this.loading.reject(new Error(`preference provider for '${uri}' was disposed`))));\n        await this.readPreferencesFromFile();\n        this._ready.resolve();\n\n        const reference = await this.textModelService.createModelReference(uri);\n        if (this.toDispose.disposed) {\n            reference.dispose();\n            return;\n        }\n\n        this.model = reference.object;\n        this.loading.resolve();\n        this.modelInitialized = true;\n\n        this.toDispose.push(reference);\n        this.toDispose.push(Disposable.create(() => this.model = undefined));\n\n        this.toDispose.push(this.model.onDidChangeContent(() => this.readPreferences()));\n        this.toDispose.push(this.model.onDirtyChanged(() => this.readPreferences()));\n        this.toDispose.push(this.model.onDidChangeValid(() => this.readPreferences()));\n\n        this.toDispose.push(Disposable.create(() => this.reset()));\n    }\n\n    protected abstract getUri(): URI;\n    protected abstract getScope(): PreferenceScope;\n\n    protected get valid(): boolean {\n        return this.modelInitialized ? !!this.model?.valid : Object.keys(this.preferences).length > 0;\n    }\n\n    getConfigUri(): URI;\n    getConfigUri(resourceUri: string | undefined): URI | undefined;\n    getConfigUri(resourceUri?: string): URI | undefined {\n        if (!resourceUri) {\n            return this.getUri();\n        }\n        return this.valid && this.contains(resourceUri) ? this.getUri() : undefined;\n    }\n\n    contains(resourceUri: string | undefined): boolean {\n        if (!resourceUri) {\n            return true;\n        }\n        const domain = this.getDomain();\n        if (!domain) {\n            return true;\n        }\n        const resourcePath = new URI(resourceUri).path;\n        return domain.some(uri => new URI(uri).path.relativity(resourcePath) >= 0);\n    }\n\n    getPreferences(resourceUri?: string): { [key: string]: any } {\n        return this.valid && this.contains(resourceUri) ? this.preferences : {};\n    }\n\n    async setPreference(key: string, value: any, resourceUri?: string): Promise<boolean> {\n        await this.loading.promise;\n        if (!this.model) {\n            return false;\n        }\n        if (!this.contains(resourceUri)) {\n            return false;\n        }\n        const path = this.getPath(key);\n        if (!path) {\n            return false;\n        }\n        try {\n            const content = this.model.getText().trim();\n            if (!content && value === undefined) {\n                return true;\n            }\n            const textModel = this.model.textEditorModel;\n            const editOperations: monaco.editor.IIdentifiedSingleEditOperation[] = [];\n            if (path.length || value !== undefined) {\n                const { insertSpaces, tabSize, defaultEOL } = textModel.getOptions();\n                for (const edit of jsoncparser.modify(content, path, value, {\n                    formattingOptions: {\n                        insertSpaces,\n                        tabSize,\n                        eol: defaultEOL === monaco.editor.DefaultEndOfLine.LF ? '\\n' : '\\r\\n'\n                    }\n                })) {\n                    const start = textModel.getPositionAt(edit.offset);\n                    const end = textModel.getPositionAt(edit.offset + edit.length);\n                    editOperations.push({\n                        range: monaco.Range.fromPositions(start, end),\n                        text: edit.content || null,\n                        forceMoveMarkers: false\n                    });\n                }\n            } else {\n                editOperations.push({\n                    range: textModel.getFullModelRange(),\n                    text: null,\n                    forceMoveMarkers: false\n                });\n            }\n            await this.workspace.applyBackgroundEdit(this.model, editOperations);\n            return await this.pendingChanges;\n        } catch (e) {\n            const message = `Failed to update the value of '${key}' in '${this.getUri()}'.`;\n            this.messageService.error(`${message} Please check if it is corrupted.`);\n            console.error(`${message}`, e);\n            return false;\n        }\n    }\n\n    protected getPath(preferenceName: string): string[] | undefined {\n        return [preferenceName];\n    }\n\n    protected async readPreferencesFromFile(): Promise<void> {\n        const content = await this.fileService.read(this.getUri()).catch(() => ({ value: '' }));\n        this.readPreferencesFromContent(content.value);\n    }\n\n    /**\n     * It HAS to be sync to ensure that `setPreference` returns only when values are updated\n     * or any other operation modifying the monaco model content.\n     */\n    protected readPreferences(): void {\n        const model = this.model;\n        if (!model || model.dirty) {\n            return;\n        }\n        try {\n            const content = model.valid ? model.getText() : '';\n            this.readPreferencesFromContent(content);\n        } catch (e) {\n            console.error(`Failed to load preferences from '${this.getUri()}'.`, e);\n        }\n    }\n\n    protected readPreferencesFromContent(content: string): void {\n        let preferencesInJson;\n        try {\n            preferencesInJson = this.parse(content);\n        } catch {\n            preferencesInJson = {};\n        }\n        const parsedPreferences = this.getParsedContent(preferencesInJson);\n        this.handlePreferenceChanges(parsedPreferences);\n    }\n\n    protected parse(content: string): any {\n        content = content.trim();\n        if (!content) {\n            return undefined;\n        }\n        const strippedContent = jsoncparser.stripComments(content);\n        return jsoncparser.parse(strippedContent);\n    }\n\n    protected handlePreferenceChanges(newPrefs: { [key: string]: any }): void {\n        const oldPrefs = Object.assign({}, this.preferences);\n        this.preferences = newPrefs;\n        const prefNames = new Set([...Object.keys(oldPrefs), ...Object.keys(newPrefs)]);\n        const prefChanges: PreferenceProviderDataChange[] = [];\n        const uri = this.getUri();\n        for (const prefName of prefNames.values()) {\n            const oldValue = oldPrefs[prefName];\n            const newValue = newPrefs[prefName];\n            const schemaProperties = this.schemaProvider.getCombinedSchema().properties[prefName];\n            if (schemaProperties) {\n                const scope = schemaProperties.scope;\n                // do not emit the change event if the change is made out of the defined preference scope\n                if (!this.schemaProvider.isValidInScope(prefName, this.getScope())) {\n                    console.warn(`Preference ${prefName} in ${uri} can only be defined in scopes: ${PreferenceScope.getScopeNames(scope).join(', ')}.`);\n                    continue;\n                }\n            }\n            if (!PreferenceProvider.deepEqual(newValue, oldValue)) {\n                prefChanges.push({\n                    preferenceName: prefName, newValue, oldValue, scope: this.getScope(), domain: this.getDomain()\n                });\n            }\n        }\n\n        if (prefChanges.length > 0) { // do not emit the change event if the pref value is not changed\n            this.emitPreferencesChangedEvent(prefChanges);\n        }\n    }\n\n    protected reset(): void {\n        const preferences = this.preferences;\n        this.preferences = {};\n        const changes: PreferenceProviderDataChange[] = [];\n        for (const prefName of Object.keys(preferences)) {\n            const value = preferences[prefName];\n            if (value !== undefined) {\n                changes.push({\n                    preferenceName: prefName, newValue: undefined, oldValue: value, scope: this.getScope(), domain: this.getDomain()\n                });\n            }\n        }\n        if (changes.length > 0) {\n            this.emitPreferencesChangedEvent(changes);\n        }\n    }\n\n}\n","/********************************************************************************\n * Copyright (C) 2019 Ericsson and others.\n *\n * This program and the accompanying materials are made available under the\n * terms of the Eclipse Public License v. 2.0 which is available at\n * http://www.eclipse.org/legal/epl-2.0.\n *\n * This Source Code may also be made available under the following Secondary\n * Licenses when the conditions for such availability set forth in the Eclipse\n * Public License v. 2.0 are satisfied: GNU General Public License, version 2\n * with the GNU Classpath Exception which is available at\n * https://www.gnu.org/software/classpath/license.html.\n *\n * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0\n ********************************************************************************/\n\nimport { inject, injectable } from '@theia/core/shared/inversify';\nimport URI from '@theia/core/lib/common/uri';\nimport { PreferenceScope } from '@theia/core/lib/browser';\nimport { FileStat } from '@theia/filesystem/lib/common/files';\nimport { WorkspaceService } from '@theia/workspace/lib/browser/workspace-service';\nimport { SectionPreferenceProvider } from './section-preference-provider';\n\nexport const FolderPreferenceProviderFactory = Symbol('FolderPreferenceProviderFactory');\nexport interface FolderPreferenceProviderFactory {\n    (uri: URI, section: string, folder: FileStat): FolderPreferenceProvider;\n}\n\nexport const FolderPreferenceProviderFolder = Symbol('FolderPreferenceProviderFolder');\nexport interface FolderPreferenceProviderOptions {\n    readonly configUri: URI;\n    readonly sectionName: string | undefined;\n}\n\n@injectable()\nexport class FolderPreferenceProvider extends SectionPreferenceProvider {\n\n    @inject(WorkspaceService) protected readonly workspaceService: WorkspaceService;\n    @inject(FolderPreferenceProviderFolder) protected readonly folder: FileStat;\n\n    private _folderUri: URI;\n\n    get folderUri(): URI {\n        if (!this._folderUri) {\n            this._folderUri = this.folder.resource;\n        }\n        return this._folderUri;\n    }\n    protected getScope(): PreferenceScope {\n        if (!this.workspaceService.isMultiRootWorkspaceOpened) {\n            // when FolderPreferenceProvider is used as a delegate of WorkspacePreferenceProvider in a one-folder workspace\n            return PreferenceScope.Workspace;\n        }\n        return PreferenceScope.Folder;\n    }\n\n    getDomain(): string[] {\n        return [this.folderUri.toString()];\n    }\n}\n","/********************************************************************************\n * Copyright (C) 2019 Ericsson and others.\n *\n * This program and the accompanying materials are made available under the\n * terms of the Eclipse Public License v. 2.0 which is available at\n * http://www.eclipse.org/legal/epl-2.0.\n *\n * This Source Code may also be made available under the following Secondary\n * Licenses when the conditions for such availability set forth in the Eclipse\n * Public License v. 2.0 are satisfied: GNU General Public License, version 2\n * with the GNU Classpath Exception which is available at\n * https://www.gnu.org/software/classpath/license.html.\n *\n * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0\n ********************************************************************************/\n\n/* eslint-disable @typescript-eslint/no-explicit-any */\n\nimport { inject, injectable, postConstruct } from '@theia/core/shared/inversify';\nimport URI from '@theia/core/lib/common/uri';\nimport { PreferenceProvider, PreferenceResolveResult } from '@theia/core/lib/browser/preferences/preference-provider';\nimport { WorkspaceService } from '@theia/workspace/lib/browser/workspace-service';\nimport { PreferenceConfigurations } from '@theia/core/lib/browser/preferences/preference-configurations';\nimport { FolderPreferenceProvider, FolderPreferenceProviderFactory } from './folder-preference-provider';\nimport { FileStat } from '@theia/filesystem/lib/common/files';\n\n@injectable()\nexport class FoldersPreferencesProvider extends PreferenceProvider {\n\n    @inject(WorkspaceService)\n    protected readonly workspaceService: WorkspaceService;\n\n    @inject(FolderPreferenceProviderFactory)\n    protected readonly folderPreferenceProviderFactory: FolderPreferenceProviderFactory;\n\n    @inject(PreferenceConfigurations)\n    protected readonly configurations: PreferenceConfigurations;\n\n    protected readonly providers = new Map<string, FolderPreferenceProvider>();\n\n    @postConstruct()\n    protected async init(): Promise<void> {\n        await this.workspaceService.roots;\n\n        this.updateProviders();\n        this.workspaceService.onWorkspaceChanged(() => this.updateProviders());\n\n        const readyPromises: Promise<void>[] = [];\n        for (const provider of this.providers.values()) {\n            readyPromises.push(provider.ready.catch(e => console.error(e)));\n        }\n        Promise.all(readyPromises).then(() => this._ready.resolve());\n    }\n\n    protected updateProviders(): void {\n        const roots = this.workspaceService.tryGetRoots();\n        const toDelete = new Set(this.providers.keys());\n        for (const folder of roots) {\n            for (const configPath of this.configurations.getPaths()) {\n                for (const configName of [...this.configurations.getSectionNames(), this.configurations.getConfigName()]) {\n                    const sectionUri = this.configurations.createUri(folder.resource, configPath, configName);\n                    const sectionKey = sectionUri.toString();\n                    toDelete.delete(sectionKey);\n                    if (!this.providers.has(sectionKey)) {\n                        const provider = this.createProvider(sectionUri, configName, folder);\n                        this.providers.set(sectionKey, provider);\n                    }\n                }\n            }\n        }\n        for (const key of toDelete) {\n            const provider = this.providers.get(key);\n            if (provider) {\n                this.providers.delete(key);\n                provider.dispose();\n            }\n        }\n    }\n\n    getConfigUri(resourceUri?: string, sectionName: string = this.configurations.getConfigName()): URI | undefined {\n        for (const provider of this.getFolderProviders(resourceUri)) {\n            const configUri = provider.getConfigUri(resourceUri);\n            if (configUri && this.configurations.getName(configUri) === sectionName) {\n                return configUri;\n            }\n        }\n        return undefined;\n    }\n\n    getContainingConfigUri(resourceUri?: string, sectionName: string = this.configurations.getConfigName()): URI | undefined {\n        for (const provider of this.getFolderProviders(resourceUri)) {\n            const configUri = provider.getConfigUri();\n            if (provider.contains(resourceUri) && this.configurations.getName(configUri) === sectionName) {\n                return configUri;\n            }\n        }\n        return undefined;\n    }\n\n    getDomain(): string[] {\n        return this.workspaceService.tryGetRoots().map(root => root.resource.toString());\n    }\n\n    resolve<T>(preferenceName: string, resourceUri?: string): PreferenceResolveResult<T> {\n        const result: PreferenceResolveResult<T> = {};\n        const groups = this.groupProvidersByConfigName(resourceUri);\n        for (const group of groups.values()) {\n            for (const provider of group) {\n                const { value, configUri } = provider.resolve<T>(preferenceName, resourceUri);\n                if (configUri && value !== undefined) {\n                    result.configUri = configUri;\n                    result.value = PreferenceProvider.merge(result.value as any, value as any) as any;\n                    break;\n                }\n            }\n        }\n        return result;\n    }\n\n    getPreferences(resourceUri?: string): { [p: string]: any } {\n        let result = {};\n        const groups = this.groupProvidersByConfigName(resourceUri);\n        for (const group of groups.values()) {\n            for (const provider of group) {\n                if (provider.getConfigUri(resourceUri)) {\n                    const preferences = provider.getPreferences();\n                    result = PreferenceProvider.merge(result, preferences) as any;\n                    break;\n                }\n            }\n        }\n        return result;\n    }\n\n    async setPreference(preferenceName: string, value: any, resourceUri?: string): Promise<boolean> {\n        const firstPathFragment = preferenceName.split('.', 1)[0];\n        const defaultConfigName = this.configurations.getConfigName();\n        const configName = this.configurations.isSectionName(firstPathFragment) ? firstPathFragment : defaultConfigName;\n\n        const providers = this.getFolderProviders(resourceUri);\n        let configPath: string | undefined;\n        const candidates = providers.filter(provider => {\n            // Attempt to figure out the settings folder (.vscode or .theia) we're interested in.\n            const containingConfigUri = provider.getConfigUri(resourceUri);\n            if (configPath === undefined && containingConfigUri) {\n                configPath = this.configurations.getPath(containingConfigUri);\n            }\n            const providerName = this.configurations.getName(containingConfigUri ?? provider.getConfigUri());\n            return providerName === configName || providerName === defaultConfigName;\n        });\n\n        const configNameAndPathMatches = [];\n        const configNameOnlyMatches = [];\n        const configUriMatches = [];\n        const otherMatches = [];\n\n        for (const candidate of candidates) {\n            const domainMatches = candidate.getConfigUri(resourceUri);\n            const configUri = domainMatches ?? candidate.getConfigUri();\n            const nameMatches = this.configurations.getName(configUri) === configName;\n            const pathMatches = this.configurations.getPath(configUri) === configPath;\n\n            // Perfect match, run immediately in case we can bail out early.\n            if (nameMatches && domainMatches) {\n                if (await candidate.setPreference(preferenceName, value, resourceUri)) {\n                    return true;\n                }\n            } else if (nameMatches && pathMatches) { // Right file in the right folder.\n                configNameAndPathMatches.push(candidate);\n            } else if (nameMatches) { // Right file.\n                configNameOnlyMatches.push(candidate);\n            } else if (domainMatches) { // Currently valid and governs target URI\n                configUriMatches.push(candidate);\n            } else {\n                otherMatches.push(candidate);\n            }\n        }\n\n        const candidateSets = [configNameAndPathMatches, configNameOnlyMatches, configUriMatches, otherMatches];\n\n        for (const candidateSet of candidateSets) {\n            for (const candidate of candidateSet) {\n                if (await candidate.setPreference(preferenceName, value, resourceUri)) {\n                    return true;\n                }\n            }\n        }\n\n        return false;\n    }\n\n    protected groupProvidersByConfigName(resourceUri?: string): Map<string, FolderPreferenceProvider[]> {\n        const groups = new Map<string, FolderPreferenceProvider[]>();\n        const providers = this.getFolderProviders(resourceUri);\n        for (const configName of [this.configurations.getConfigName(), ...this.configurations.getSectionNames()]) {\n            const group = [];\n            for (const provider of providers) {\n                if (this.configurations.getName(provider.getConfigUri()) === configName) {\n                    group.push(provider);\n                }\n            }\n            groups.set(configName, group);\n        }\n        return groups;\n    }\n\n    protected getFolderProviders(resourceUri?: string): FolderPreferenceProvider[] {\n        if (!resourceUri) {\n            return [];\n        }\n        const resourcePath = new URI(resourceUri).path;\n        let folder: Readonly<{ relativity: number, uri?: string }> = { relativity: Number.MAX_SAFE_INTEGER };\n        const providers = new Map<string, FolderPreferenceProvider[]>();\n        for (const provider of this.providers.values()) {\n            const uri = provider.folderUri.toString();\n            const folderProviders = (providers.get(uri) || []);\n            folderProviders.push(provider);\n            providers.set(uri, folderProviders);\n\n            // in case we have nested folders mounted as workspace roots, select the innermost enclosing folder\n            const relativity = provider.folderUri.path.relativity(resourcePath);\n            if (relativity >= 0 && folder.relativity > relativity) {\n                folder = { relativity, uri };\n            }\n        }\n        return folder.uri && providers.get(folder.uri) || [];\n    }\n\n    protected createProvider(uri: URI, section: string, folder: FileStat): FolderPreferenceProvider {\n        const provider = this.folderPreferenceProviderFactory(uri, section, folder);\n        this.toDispose.push(provider);\n        this.toDispose.push(provider.onDidPreferencesChanged(change => {\n            this.onDidPreferencesChangedEmitter.fire(change);\n        }\n        ));\n        return provider;\n    }\n\n}\n","/********************************************************************************\n * Copyright (C) 2018 Ericsson and others.\n *\n * This program and the accompanying materials are made available under the\n * terms of the Eclipse Public License v. 2.0 which is available at\n * http://www.eclipse.org/legal/epl-2.0.\n *\n * This Source Code may also be made available under the following Secondary\n * Licenses when the conditions for such availability set forth in the Eclipse\n * Public License v. 2.0 are satisfied: GNU General Public License, version 2\n * with the GNU Classpath Exception which is available at\n * https://www.gnu.org/software/classpath/license.html.\n *\n * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0\n ********************************************************************************/\n\nimport { Container, interfaces } from '@theia/core/shared/inversify';\nimport { PreferenceProvider, PreferenceScope } from '@theia/core/lib/browser/preferences';\nimport { UserPreferenceProvider, UserPreferenceProviderFactory } from './user-preference-provider';\nimport { WorkspacePreferenceProvider } from './workspace-preference-provider';\nimport { WorkspaceFilePreferenceProvider, WorkspaceFilePreferenceProviderFactory, WorkspaceFilePreferenceProviderOptions } from './workspace-file-preference-provider';\nimport { FoldersPreferencesProvider } from './folders-preferences-provider';\nimport { FolderPreferenceProvider, FolderPreferenceProviderFactory, FolderPreferenceProviderFolder } from './folder-preference-provider';\nimport { UserConfigsPreferenceProvider } from './user-configs-preference-provider';\nimport { SectionPreferenceProviderUri, SectionPreferenceProviderSection } from './section-preference-provider';\n\nexport function bindWorkspaceFilePreferenceProvider(bind: interfaces.Bind): void {\n    bind(WorkspaceFilePreferenceProviderFactory).toFactory(ctx => (options: WorkspaceFilePreferenceProviderOptions) => {\n        const child = new Container({ defaultScope: 'Singleton' });\n        child.parent = ctx.container;\n        child.bind(WorkspaceFilePreferenceProvider).toSelf();\n        child.bind(WorkspaceFilePreferenceProviderOptions).toConstantValue(options);\n        return child.get(WorkspaceFilePreferenceProvider);\n    });\n}\n\nexport function bindFactory<F, C>(bind: interfaces.Bind,\n    factoryId: interfaces.ServiceIdentifier<F>,\n    constructor: interfaces.Newable<C>,\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    ...parameterBindings: interfaces.ServiceIdentifier<any>[]): void {\n    bind(factoryId).toFactory(ctx =>\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        (...args: any[]) => {\n            const child = new Container({ defaultScope: 'Singleton' });\n            child.parent = ctx.container;\n            for (let i = 0; i < parameterBindings.length; i++) {\n                child.bind(parameterBindings[i]).toConstantValue(args[i]);\n            }\n            child.bind(constructor).to(constructor);\n            return child.get(constructor);\n        }\n    );\n}\n\nexport function bindPreferenceProviders(bind: interfaces.Bind, unbind: interfaces.Unbind): void {\n    unbind(PreferenceProvider);\n\n    bind(PreferenceProvider).to(UserConfigsPreferenceProvider).inSingletonScope().whenTargetNamed(PreferenceScope.User);\n    bind(PreferenceProvider).to(WorkspacePreferenceProvider).inSingletonScope().whenTargetNamed(PreferenceScope.Workspace);\n    bind(PreferenceProvider).to(FoldersPreferencesProvider).inSingletonScope().whenTargetNamed(PreferenceScope.Folder);\n    bindWorkspaceFilePreferenceProvider(bind);\n    bindFactory(bind, UserPreferenceProviderFactory, UserPreferenceProvider, SectionPreferenceProviderUri, SectionPreferenceProviderSection);\n    bindFactory(bind, FolderPreferenceProviderFactory, FolderPreferenceProvider, SectionPreferenceProviderUri, SectionPreferenceProviderSection, FolderPreferenceProviderFolder);\n}\n","/********************************************************************************\n * Copyright (C) 2019 Ericsson and others.\n *\n * This program and the accompanying materials are made available under the\n * terms of the Eclipse Public License v. 2.0 which is available at\n * http://www.eclipse.org/legal/epl-2.0.\n *\n * This Source Code may also be made available under the following Secondary\n * Licenses when the conditions for such availability set forth in the Eclipse\n * Public License v. 2.0 are satisfied: GNU General Public License, version 2\n * with the GNU Classpath Exception which is available at\n * https://www.gnu.org/software/classpath/license.html.\n *\n * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0\n ********************************************************************************/\n\nimport { inject, injectable } from '@theia/core/shared/inversify';\nimport URI from '@theia/core/lib/common/uri';\nimport { AbstractResourcePreferenceProvider } from './abstract-resource-preference-provider';\nimport { WorkspaceService } from '@theia/workspace/lib/browser/workspace-service';\nimport { PreferenceConfigurations } from '@theia/core/lib/browser/preferences/preference-configurations';\n\nexport const SectionPreferenceProviderUri = Symbol('SectionPreferenceProviderUri');\nexport const SectionPreferenceProviderSection = Symbol('SectionPreferenceProviderSection');\n\n/**\n * This class encapsulates the logic of using separate files for some workspace configuration like 'launch.json' or 'tasks.json'.\n * Anything that is not a contributed section will be in the main config file.\n */\n@injectable()\nexport abstract class SectionPreferenceProvider extends AbstractResourcePreferenceProvider {\n\n    @inject(WorkspaceService)\n    protected readonly workspaceService: WorkspaceService;\n    @inject(SectionPreferenceProviderUri)\n    protected readonly uri: URI;\n    @inject(SectionPreferenceProviderSection)\n    protected readonly section: string;\n    @inject(PreferenceConfigurations)\n    protected readonly preferenceConfigurations: PreferenceConfigurations;\n\n    private _isSection?: boolean;\n\n    private get isSection(): boolean {\n        if (typeof this._isSection === 'undefined') {\n            this._isSection = this.preferenceConfigurations.isSectionName(this.section);\n        }\n        return this._isSection;\n    }\n\n    protected getUri(): URI {\n        return this.uri;\n    }\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    protected parse(content: string): any {\n        const prefs = super.parse(content);\n        if (this.isSection) {\n            if (prefs === undefined) {\n                return undefined;\n            }\n            const result: { [k: string]: unknown } = {\n\n            };\n            result[this.section] = { ...prefs };\n            return result;\n        } else {\n            return prefs;\n        }\n    }\n\n    protected getPath(preferenceName: string): string[] | undefined {\n        if (!this.isSection) {\n            return super.getPath(preferenceName);\n        }\n        if (preferenceName === this.section) {\n            return [];\n        }\n        if (preferenceName.startsWith(`${this.section}.`)) {\n            return [preferenceName.slice(this.section.length + 1)];\n        }\n        return undefined;\n    }\n}\n","/********************************************************************************\n * Copyright (C) 2019 Ericsson and others.\n *\n * This program and the accompanying materials are made available under the\n * terms of the Eclipse Public License v. 2.0 which is available at\n * http://www.eclipse.org/legal/epl-2.0.\n *\n * This Source Code may also be made available under the following Secondary\n * Licenses when the conditions for such availability set forth in the Eclipse\n * Public License v. 2.0 are satisfied: GNU General Public License, version 2\n * with the GNU Classpath Exception which is available at\n * https://www.gnu.org/software/classpath/license.html.\n *\n * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0\n ********************************************************************************/\n\n/* eslint-disable @typescript-eslint/no-explicit-any */\n\nimport { inject, injectable, postConstruct } from '@theia/core/shared/inversify';\nimport URI from '@theia/core/lib/common/uri';\nimport { PreferenceProvider, PreferenceResolveResult } from '@theia/core/lib/browser/preferences/preference-provider';\nimport { PreferenceConfigurations } from '@theia/core/lib/browser/preferences/preference-configurations';\nimport { UserStorageUri } from '@theia/userstorage/lib/browser';\nimport { UserPreferenceProvider, UserPreferenceProviderFactory } from './user-preference-provider';\n\n/**\n * Binds together preference section prefs providers for user-level preferences.\n */\n@injectable()\nexport class UserConfigsPreferenceProvider extends PreferenceProvider {\n\n    @inject(UserPreferenceProviderFactory)\n    protected readonly providerFactory: UserPreferenceProviderFactory;\n\n    @inject(PreferenceConfigurations)\n    protected readonly configurations: PreferenceConfigurations;\n\n    protected readonly providers = new Map<string, UserPreferenceProvider>();\n\n    @postConstruct()\n    protected async init(): Promise<void> {\n        this.createProviders();\n\n        const readyPromises: Promise<void>[] = [];\n        for (const provider of this.providers.values()) {\n            readyPromises.push(provider.ready.catch(e => console.error(e)));\n        }\n        Promise.all(readyPromises).then(() => this._ready.resolve());\n    }\n\n    protected createProviders(): void {\n        for (const configName of [...this.configurations.getSectionNames(), this.configurations.getConfigName()]) {\n            const sectionUri = UserStorageUri.resolve(configName + '.json');\n            const sectionKey = sectionUri.toString();\n            if (!this.providers.has(sectionKey)) {\n                const provider = this.createProvider(sectionUri, configName);\n                this.providers.set(sectionKey, provider);\n            }\n        }\n    }\n\n    getConfigUri(resourceUri?: string, sectionName: string = this.configurations.getConfigName()): URI | undefined {\n        for (const provider of this.providers.values()) {\n            const configUri = provider.getConfigUri(resourceUri);\n            if (configUri && this.configurations.getName(configUri) === sectionName) {\n                return configUri;\n            }\n        }\n        return undefined;\n    }\n\n    resolve<T>(preferenceName: string, resourceUri?: string): PreferenceResolveResult<T> {\n        const result: PreferenceResolveResult<T> = {};\n        for (const provider of this.providers.values()) {\n            const { value, configUri } = provider.resolve<T>(preferenceName, resourceUri);\n            if (configUri && value !== undefined) {\n                result.configUri = configUri;\n                result.value = PreferenceProvider.merge(result.value as any, value as any) as any;\n            }\n        }\n        return result;\n    }\n\n    getPreferences(resourceUri?: string): { [p: string]: any } {\n        let result = {};\n        for (const provider of this.providers.values()) {\n            const preferences = provider.getPreferences();\n            result = PreferenceProvider.merge(result, preferences) as any;\n        }\n        return result;\n    }\n\n    async setPreference(preferenceName: string, value: any, resourceUri?: string): Promise<boolean> {\n        const sectionName = preferenceName.split('.', 1)[0];\n        const defaultConfigName = this.configurations.getConfigName();\n        const configName = this.configurations.isSectionName(sectionName) ? sectionName : defaultConfigName;\n\n        const setWithConfigName = async (name: string): Promise<boolean> => {\n            for (const provider of this.providers.values()) {\n                if (this.configurations.getName(provider.getConfigUri()) === name) {\n                    if (await provider.setPreference(preferenceName, value, resourceUri)) {\n                        return true;\n                    }\n                }\n            }\n            return false;\n        };\n\n        if (await setWithConfigName(configName)) { // Try in the section we believe it belongs in.\n            return true;\n        } else if (configName !== defaultConfigName) { // Fall back to `settings.json` if that fails.\n            return setWithConfigName(defaultConfigName);\n        }\n        return false;\n    }\n\n    protected createProvider(uri: URI, sectionName: string): UserPreferenceProvider {\n        const provider = this.providerFactory(uri, sectionName);\n        this.toDispose.push(provider);\n        this.toDispose.push(provider.onDidPreferencesChanged(change => this.onDidPreferencesChangedEmitter.fire(change)));\n        return provider;\n    }\n}\n","/********************************************************************************\n * Copyright (C) 2018 Ericsson and others.\n *\n * This program and the accompanying materials are made available under the\n * terms of the Eclipse Public License v. 2.0 which is available at\n * http://www.eclipse.org/legal/epl-2.0.\n *\n * This Source Code may also be made available under the following Secondary\n * Licenses when the conditions for such availability set forth in the Eclipse\n * Public License v. 2.0 are satisfied: GNU General Public License, version 2\n * with the GNU Classpath Exception which is available at\n * https://www.gnu.org/software/classpath/license.html.\n *\n * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0\n ********************************************************************************/\n\nimport { injectable } from '@theia/core/shared/inversify';\nimport URI from '@theia/core/lib/common/uri';\nimport { PreferenceScope } from '@theia/core/lib/browser';\nimport { SectionPreferenceProvider } from './section-preference-provider';\n\nexport const UserPreferenceProviderFactory = Symbol('UserPreferenceProviderFactory');\nexport interface UserPreferenceProviderFactory {\n    (uri: URI, section: string): UserPreferenceProvider;\n};\n\n/**\n * A @SectionPreferenceProvider that targets the user-level settings\n */\n@injectable()\nexport class UserPreferenceProvider extends SectionPreferenceProvider {\n    protected getScope(): PreferenceScope {\n        return PreferenceScope.User;\n    }\n}\n","/********************************************************************************\n * Copyright (C) 2019 TypeFox and others.\n *\n * This program and the accompanying materials are made available under the\n * terms of the Eclipse Public License v. 2.0 which is available at\n * http://www.eclipse.org/legal/epl-2.0.\n *\n * This Source Code may also be made available under the following Secondary\n * Licenses when the conditions for such availability set forth in the Eclipse\n * Public License v. 2.0 are satisfied: GNU General Public License, version 2\n * with the GNU Classpath Exception which is available at\n * https://www.gnu.org/software/classpath/license.html.\n *\n * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0\n ********************************************************************************/\n\nimport { inject, injectable } from '@theia/core/shared/inversify';\nimport URI from '@theia/core/lib/common/uri';\nimport { PreferenceScope } from '@theia/core/lib/browser/preferences';\nimport { WorkspaceService, WorkspaceData } from '@theia/workspace/lib/browser/workspace-service';\nimport { AbstractResourcePreferenceProvider } from './abstract-resource-preference-provider';\n\n@injectable()\nexport class WorkspaceFilePreferenceProviderOptions {\n    workspaceUri: URI;\n}\n\nexport const WorkspaceFilePreferenceProviderFactory = Symbol('WorkspaceFilePreferenceProviderFactory');\nexport type WorkspaceFilePreferenceProviderFactory = (options: WorkspaceFilePreferenceProviderOptions) => WorkspaceFilePreferenceProvider;\n\n@injectable()\nexport class WorkspaceFilePreferenceProvider extends AbstractResourcePreferenceProvider {\n\n    @inject(WorkspaceService)\n    protected readonly workspaceService: WorkspaceService;\n\n    @inject(WorkspaceFilePreferenceProviderOptions)\n    protected readonly options: WorkspaceFilePreferenceProviderOptions;\n\n    protected sectionsInsideSettings = new Set<string>();\n\n    protected getUri(): URI {\n        return this.options.workspaceUri;\n    }\n\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    protected parse(content: string): any {\n        const data = super.parse(content);\n        if (WorkspaceData.is(data)) {\n            const settings = { ...data.settings };\n            for (const key of this.configurations.getSectionNames().filter(name => name !== 'settings')) {\n                // If the user has written configuration inside the \"settings\" object, we will respect that.\n                if (settings[key]) {\n                    this.sectionsInsideSettings.add(key);\n                }\n                // Favor sections outside the \"settings\" object to agree with VSCode behavior\n                if (data[key]) {\n                    settings[key] = data[key];\n                    this.sectionsInsideSettings.delete(key);\n                }\n            }\n            return settings;\n        }\n        return {};\n    }\n\n    protected getPath(preferenceName: string): string[] {\n        const firstSegment = preferenceName.split('.', 1)[0];\n        const remainder = preferenceName.slice(firstSegment.length + 1);\n        if (this.belongsInSection(firstSegment, remainder)) {\n            // Default to writing sections outside the \"settings\" object.\n            const path = [firstSegment];\n            if (remainder) {\n                path.push(remainder);\n            }\n            // If the user has already written this section inside the \"settings\" object, modify it there.\n            if (this.sectionsInsideSettings.has(firstSegment)) {\n                path.unshift('settings');\n            }\n            return path;\n        }\n        return ['settings', preferenceName];\n    }\n\n    protected belongsInSection(firstSegment: string, remainder: string): boolean {\n        return this.configurations.isSectionName(firstSegment);\n    }\n\n    protected getScope(): PreferenceScope {\n        return PreferenceScope.Workspace;\n    }\n\n    getDomain(): string[] {\n        // workspace file is treated as part of the workspace\n        return this.workspaceService.tryGetRoots().map(r => r.resource.toString()).concat([this.options.workspaceUri.toString()]);\n    }\n}\n","/********************************************************************************\n * Copyright (C) 2018 Ericsson and others.\n *\n * This program and the accompanying materials are made available under the\n * terms of the Eclipse Public License v. 2.0 which is available at\n * http://www.eclipse.org/legal/epl-2.0.\n *\n * This Source Code may also be made available under the following Secondary\n * Licenses when the conditions for such availability set forth in the Eclipse\n * Public License v. 2.0 are satisfied: GNU General Public License, version 2\n * with the GNU Classpath Exception which is available at\n * https://www.gnu.org/software/classpath/license.html.\n *\n * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0\n ********************************************************************************/\n\n/* eslint-disable @typescript-eslint/no-explicit-any */\n\nimport { inject, injectable, postConstruct, named } from '@theia/core/shared/inversify';\nimport URI from '@theia/core/lib/common/uri';\nimport { DisposableCollection } from '@theia/core/lib/common/disposable';\nimport { PreferenceScope, PreferenceProvider } from '@theia/core/lib/browser/preferences';\nimport { WorkspaceService } from '@theia/workspace/lib/browser/workspace-service';\nimport { WorkspaceFilePreferenceProviderFactory, WorkspaceFilePreferenceProvider } from './workspace-file-preference-provider';\n\n@injectable()\nexport class WorkspacePreferenceProvider extends PreferenceProvider {\n\n    @inject(WorkspaceService)\n    protected readonly workspaceService: WorkspaceService;\n\n    @inject(WorkspaceFilePreferenceProviderFactory)\n    protected readonly workspaceFileProviderFactory: WorkspaceFilePreferenceProviderFactory;\n\n    @inject(PreferenceProvider) @named(PreferenceScope.Folder)\n    protected readonly folderPreferenceProvider: PreferenceProvider;\n\n    protected readonly toDisposeOnEnsureDelegateUpToDate = new DisposableCollection();\n\n    @postConstruct()\n    protected async init(): Promise<void> {\n        this.workspaceService.ready.then(() => {\n            // If there is no workspace after the workspace service is initialized, then no more work is needed for this provider to be ready.\n            // If there is a workspace, then we wait for the new delegate to be ready before declaring this provider ready.\n            if (!this.workspaceService.workspace) {\n                this._ready.resolve();\n            }\n        });\n        this.toDispose.push(this.toDisposeOnEnsureDelegateUpToDate);\n        this.workspaceService.onWorkspaceLocationChanged(() => this.ensureDelegateUpToDate());\n        this.workspaceService.onWorkspaceChanged(() => this.ensureDelegateUpToDate());\n    }\n\n    getConfigUri(resourceUri: string | undefined = this.ensureResourceUri(), sectionName?: string): URI | undefined {\n        const delegate = this.delegate;\n        return delegate && delegate.getConfigUri(resourceUri, sectionName);\n    }\n\n    protected _delegate: PreferenceProvider | undefined;\n    protected get delegate(): PreferenceProvider | undefined {\n        return this._delegate;\n    }\n\n    protected ensureDelegateUpToDate(): void {\n        const delegate = this.createDelegate();\n        if (this._delegate !== delegate) {\n            this.toDisposeOnEnsureDelegateUpToDate.dispose();\n\n            this._delegate = delegate;\n\n            if (delegate) {\n                // If this provider has not yet declared itself ready, it should do so when the new delegate is ready.\n                delegate.ready.then(() => this._ready.resolve(), () => { });\n            }\n\n            if (delegate instanceof WorkspaceFilePreferenceProvider) {\n                this.toDisposeOnEnsureDelegateUpToDate.pushAll([\n                    delegate,\n                    delegate.onDidPreferencesChanged(changes => this.onDidPreferencesChangedEmitter.fire(changes))\n                ]);\n            }\n        }\n    }\n\n    protected createDelegate(): PreferenceProvider | undefined {\n        const workspace = this.workspaceService.workspace;\n        if (!workspace) {\n            return undefined;\n        }\n        if (!this.workspaceService.isMultiRootWorkspaceOpened) {\n            return this.folderPreferenceProvider;\n        }\n        if (this._delegate instanceof WorkspaceFilePreferenceProvider && this._delegate.getConfigUri().isEqual(workspace.resource)) {\n            return this._delegate;\n        }\n        return this.workspaceFileProviderFactory({\n            workspaceUri: workspace.resource\n        });\n    }\n\n    get<T>(preferenceName: string, resourceUri: string | undefined = this.ensureResourceUri()): T | undefined {\n        const delegate = this.delegate;\n        return delegate ? delegate.get<T>(preferenceName, resourceUri) : undefined;\n    }\n\n    resolve<T>(preferenceName: string, resourceUri: string | undefined = this.ensureResourceUri()): { value?: T, configUri?: URI } {\n        const delegate = this.delegate;\n        return delegate ? delegate.resolve<T>(preferenceName, resourceUri) : {};\n    }\n\n    getPreferences(resourceUri: string | undefined = this.ensureResourceUri()): { [p: string]: any } {\n        const delegate = this.delegate;\n        return delegate ? delegate.getPreferences(resourceUri) : {};\n    }\n\n    async setPreference(preferenceName: string, value: any, resourceUri: string | undefined = this.ensureResourceUri()): Promise<boolean> {\n        const delegate = this.delegate;\n        if (delegate) {\n            return delegate.setPreference(preferenceName, value, resourceUri);\n        }\n        return false;\n    }\n\n    protected ensureResourceUri(): string | undefined {\n        if (this.workspaceService.workspace && !this.workspaceService.isMultiRootWorkspaceOpened) {\n            return this.workspaceService.workspace.resource.toString();\n        }\n        return undefined;\n    }\n\n}\n"],"sourceRoot":""}